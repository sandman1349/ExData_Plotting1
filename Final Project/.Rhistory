points(filterenergydata$date_time, filterenergydata$Sub_metering_3,type='l',col="Blue")
legend("topright", c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
pch=1,lty=c(1,1,1),lwd=c(2.5,2.5,2.5),col=c("black","red","blue"))
dev.off()   ## Close graphics file
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
y <- if(x < 3) {
NA
} else {
10
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y <- if(x < 3) {
NA
} else {
10
}
con=url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlcode=readLines(con)
close(con)
htmlCode
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlcode=readLines(con)
close(con)
htmlCode
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlcode = readLines(con)
close(con)
htmlCode
install.packages("bioclite")
install.packages("biocLite")
install.packages("biocLite")
install.packages("rhdf5")
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlcode = readLines(con)
htmlCode
library("XML", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("httr")
html2=GET("http://biostat.jhsph.edu/~jleek/contact.html")
html2 == GET("http://biostat.jhsph.edu/~jleek/contact.html")
html2 <- GET("http://biostat.jhsph.edu/~jleek/contact.html")
library("httr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
html2 = GET("http://biostat.jhsph.edu/~jleek/contact.html")
content2=content(html2,as"text")
content2 = content(html2,as"text")
content2 = content(html2,as="text")
parsedhtml = htmlParse(content2,asText=TRUE)
head(parsedhtml)
content2
myapp = oauth_app("github"
key="37ad663abc4e6a0297c4", secret="4373a6e06c0a7989da06674f26bbdf072dadf88d")
sig= sign_oauth1.0(myapp,
token="sandman1349"
tokensecret="hiello" )
homeTL = GET(https://api.github.com/users/jtleek/repos,sig)
myapp = oauth_app("github",
key="37ad663abc4e6a0297c4", secret="4373a6e06c0a7989da06674f26bbdf072dadf88d")
sig= sign_oauth1.0(myapp,
token= "sandman1349"
tokensecret= "hiello" )
sig= sign_oauth1.0(myapp,
token= "sandman1349",
tokensecret= "hiello" )
homeTL = GET (https://api.github.com/users/jtleek/repos,sig)
homeTL = GET ("https://api.github.com/users/jtleek/repos",sig)
homeTL = GET("https://api.github.com/users/jtleek/repos",sig)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
xyplot(weight ~ Time | Diet, BodyWeight)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
drivers <- read.csv(file.choose(), header=T)
head(drivers)
p2pdrivers <- (drivers,driver_flow== "P2P")
p2pdrivers <- drivers[drivers$driver_flow== "P2P",]
commdrivers <- drivers[drivers$driver_flow== "Black",]
round(drivers$lastweek,-1)
drivers$lastweek <- round(drivers$lastweek,-1)
drivers$twoweeksago <- round(drivers$twoweeksago,-1)
drivers$threeweeksago <- round(drivers$threeweeksago,-1)
drivers$fourweeksago <- round(drivers$fourweeksago,-1)
p2pdrivers <- drivers[drivers$driver_flow== "P2P",]
commdrivers <- drivers[drivers$driver_flow== "Black",]
head(p2pdrivers)
library(dplyr)
drivers <- mutate(drivers, weeklyavg = mean(drivers$lastweek,drivers$twoweeksago,drivers$threeweeksago,drivers$fourweeksago))
drivers(complete.cases(drivers))
drivers[complete.cases(drivers),]
drivers <- read.csv(file.choose(), header=T)
drivers[complete.cases(drivers),]
head(drivers)
library(dplyr)
drivers <- mutate(drivers, weeklyavg = mean(drivers$lastweek,drivers$twoweeksago,drivers$threeweeksago,drivers$fourweeksago))
drivers <- mutate(drivers, weeklyavg = sum(drivers$lastweek,drivers$twoweeksago,drivers$threeweeksago,drivers$fourweeksago,na.rm=FALSE)/4)
head(drivers)
weeklyavg <- sum(drivers$lastweek,drivers$twoweeksago,drivers$threeweeksago,drivers$fourweeksago,na.rm=FALSE)/4)
drivers$weeklyavg <- sum(drivers$lastweek,drivers$twoweeksago,drivers$threeweeksago,drivers$fourweeksago,na.rm=FALSE)/4
head(drivers)
drivers$weeklyavg <- mean(drivers$lastweek,drivers$twoweeksago,drivers$threeweeksago,drivers$fourweeksago,na.rm=FALSE)
drivers$weeklyavg <- mean(drivers$lastweek,drivers$twoweeksago,drivers$threeweeksago,drivers$fourweeksago)
drivers$weeklyavg <- mean(drivers$lastweek,drivers$twoweeksago,drivers$threeweeksago,drivers$fourweeksago,na.rm = TRUE)
drivers$weeklyavg <- (drivers$lastweek+drivers$twoweeksago+drivers$threeweeksago+drivers$fourweeksago)/4
head(drivers)
drivers$roundedweeklyavg <- round(drivers$weeklyavg,-1)
head(drivers)
p2pdrivers <- drivers[drivers$driver_flow== "P2P",]
commdrivers <- drivers[drivers$driver_flow== "Black",]
summary(p2pdrivers)
summary(p2pdrivers$weeklyavg)
summary(commdrivers$weeklyavg)
=156.5/7
156.5/7
histogram(drivers$roundedweeklyavg|drivers$driver_flow)
library(lattice)
histogram(drivers$roundedweeklyavg|drivers$driver_flow)
histogram(roundedweeklyavg,drivers)
histogram(roundedweeklyavg$roundedweeklyavg)
head(drivers)
histogram(drivers$roundedweeklyavg)
histogram(drivers$roundedweeklyavg | drivers$driver_flow)
histogram(roundedweeklyavg | driver_flow,data=drivers)
histogram(roundedweeklyavg | driver_flow, data= drivers)
histogram(drivers$roundedweeklyavg | drivers$driver_flow, data= drivers)
histogram(~ drivers$roundedweeklyavg | drivers$driver_flow, data= drivers)
histogram(~ drivers$roundedweeklyavg | drivers$driver_flow, data= drivers, drivers$driver_flow != "Taxi")
histogram(drivers$roundedweeklyavg)
histogram(~ drivers$roundedweeklyavg | drivers$driver_flow, data= drivers, drivers$driver_flow != "Taxi")
head(drivers)
histogram(~ drivers$roundedweeklyavg | drivers$driver_flow, data= drivers, drivers$driver_flow != "Taxi")
histogram(drivers$roundedweeklyavg)
histogram(~ drivers$roundedweeklyavg | drivers$driver_flow, data= drivers, drivers$driver_flow != "Taxi")
histogram(drivers$roundedweeklyavg | drivers$driver_flow, data= drivers, drivers$driver_flow != "Taxi")
drivers2 <- drivers[drivers$driver_flow != "Taxi",]
drivers2$weeklyavg <- (drivers$lastweek+drivers$twoweeksago+drivers$threeweeksago+drivers$fourweeksago)/4
drivers2$roundedweeklyavg <- round(drivers$weeklyavg,-1)
drivers2$weeklyavg <- (drivers2$lastweek+drivers2$twoweeksago+drivers2$threeweeksago+drivers2$fourweeksago)/4
drivers2$roundedweeklyavg <- round(drivers2$weeklyavg,-1)
histogram(drivers2$roundedweeklyavg|drivers$driver_flow)
histogram(drivers2$roundedweeklyavg|drivers2$driver_flow)
histogram(~ drivers2$roundedweeklyavg | drivers2$driver_flow, data= drivers2)
histogram(~ drivers2$roundedweeklyavg | drivers2$driver_flow, data= drivers2, xlab="Average Hours per Week")
View(drivers2)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 1:10
if(x > 5) {
x <- 0
} else {3}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
pollutantmean("specdata", "sulfate", 1:10)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
question1 <- lm(y~x)
summary(question1)
mtcars
questions3 <- lm(mpg~weight)
questions3 <- lm(mtcars$mpg ~ mtcars$weight)
questions3 <- lm(mtcars$mpg ~ mtcars$wt)
summary(questions3)
mean(wt)
mean(mtcars$wt)
mean(mtcars$wt)*-5.3445
mean(mtcars$wt)*-5.3445 +  37.2851
summary(mtcars$wt)
3*-5.3445 + 37.2851
library(usingR)
data("mtcars")
library(ggplot2)
g=ggplot(mtcars, aes(x=wt, y=mpg),)
install.packages("UsingR")
library(usingR)
data("mtcars")
library(ggplot2)
g=ggplot(mtcars, aes(x=wt, y=mpg),)
install.packages("UsingR")
install.packages("UsingR")
install.packages("UsingR")
data("mtcars")
library(ggplot2)
g=ggplot(mtcars, aes(x=wt, y=mpg),)
data("mtcars")
library(ggplot2)
g=ggplot(mtcars, aes(x=wt, y=mpg),)
library(ggplot2)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("ggplot2")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:ggplot2", unload=TRUE)
install.packages("ggplot")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("ggplot2")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
detach("package:ggplot2", unload=TRUE)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(usingR)
data("mtcars")
library(ggplot2)
g=ggplot(mtcars, aes(x=wt, y=mpg),)
g
install.packages("ISLR")
library(ISLR)
library(ggplot2)
library(Caret)
data(wage)
summary(wage)
data(wage)
summary(wage)
ISLR::
data(ISLR:"Wage")
data(ISLR$wage)
summary(ISLR$wage)
data("wage")
Isle
ISLR
data("Wage")
summary(Wage)
?dim
inTrain <- createDataPartition(y=Wage$wage,
p=0.7,
list=FALSE)
training <- Wage[inTrain]
testing <- Wage[-inTrain]
dim(training); dim(testing)
dim(training)
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage,
p=0.7,
list=FALSE)
training <- Wage[inTrain]
testing <- Wage[-inTrain]
dim(training)
dim(testing)
View(cube)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training); dim(testing)
featurePlot(x=training[,c("age","education","jobclass")],
y=training$wage,
plot="pairs")
qplot(age,wage,data=training)
qplot(age,wage,colour=jobclass,data=training)
qq <- qplot(age,wage,colour=education,data=training)
qq + geom_smooth(method='lm',formula=y~x)
install.packages("Hmisc")
load(Hmisc)
cutWage <- cut2(training$wage,g=3)
## g is the number of groups to cut into
table(cutWage)
library(Hmisc)
cutWage <- cut2(training$wage,g=3)
## g is the number of groups to cut into
table(cutWage)
p1 <- qplot(cutWage,age, data=training, fill=cutwage),
geom=c("boxplot"))
p1 <- qplot(cutWage,age, data=training, fill=cutWage),
geom=c("boxplot"))
p1 <- qplot(cutWage,age, data=training, fill=cutWage,
geom=c("boxplot"))
p1
p2 <- qplot(cutWage,age,data=training,fill=cutWage,
geom=c("boxplot","jitter"))
grid.arrage(p1,p2,ncol=2)
p2 <- qplot(cutWage,age,data=training,fill=cutWage,
geom=c("boxplot","jitter"))
grid.arrange(p1,p2,ncol=2)
grid.arrange ?
? grid.arrange
? grid.arrange
install.packages("grid")
install.packages("grid")
par(mfrow=c(2,1))
p2 <- qplot(cutWage,age,data=training,fill=cutWage,
geom=c("boxplot","jitter"))
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
par(mfrow=c(2,1))
p2 <- qplot(cutWage,age,data=training,fill=cutWage,
geom=c("boxplot","jitter"))
t1 <- table(cutWage,training$jobclass)
t1
prop.table(t1,1)
qplot(wage,colour=education,data=training,geom="density")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(training)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$SuperPlasticizer)
View(training)
hist(training$Superplasticizer)
hist(training$Superplasticizer)
super <- training$Superplasticizer
trainsup <- (super -mean(super)) / sd(super)
hist(trainsup)
ppois(10,lambda = 5*3)
ppois(4,lambda = 1*.5)
ppois(4,lambda = 5*.5)
ppois(1,lambda = 5*.5)
ppois(1,lambda = .5)
qnorm(.475,mean=15,sd=10)
qnorm(.34,mean=15,sd=10)
qnorm(.68,mean=15,sd=10)
qnorm(.65,mean=15,sd=10)
qnorm(.55,mean=15,sd=10)
pbinom(1,size=5,prob=.5)
pbinom(4,size=5,prob=.5)
choose(5,4) * .5^5 + choose(5,5)*.5^5
hist(log(trainsup))
log(10)
log(-10)
hist(trainsup)
log(0)
hist(trainsup)
hist(log(trainsup))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
View(training)
hist(trainsup)
pollutantmean <- function("/Users/Sandeep/Documents/specdata",pollutant,id = 1:332)
pollutantmean <- function(/Users/Sandeep/Documents/specdata,pollutant,id = 1:332)
pollutantmean <- function('/Users/Sandeep/Documents/specdata'
,pollutant,id = 1:332)
directory <- /Users/Sandeep/Documents/specdata
directory <- "/Users/Sandeep/Documents/specdata"
pollutantmean <- function(directory,pollutant,id = 1:332)
pollutantmean("specdata", "nitrate", 70:72)
View(pollutantmean)
pollutantmean("specdata", "sulfate", 1:10)
directory
class(directory)
directory <- /Users/Sandeep/Documents/specdata
directory
pollutantmean("specdata", "nitrate", 70:72)
multmerge = function(mypath){
filenames=list.files(path=mypath, full.names=TRUE)
datalist = lapply(filenames, function(x){read.csv(file=x,header=T)})
Reduce(function(x,y) {merge(x,y)}, datalist)
multmerge = function(mypath){
filenames=list.files(path=mypath, full.names=TRUE)
datalist = lapply(filenames, function(x){read.csv(file=x,header=T)})
Reduce(function(x,y) {merge(x,y)}, datalist)
mymergeddata = multmerge(directory)
multmerge = function(mypath){
filenames=list.files(path=mypath, full.names=TRUE)
datalist = lapply(filenames, function(x){read.csv(file=x,header=T)})
Reduce(function(x,y) {merge(x,y)}, datalist)
Reduce(function(x,y) {merge(x,y)}, datalist)
x
mtcars
more
directory <- "/Users/Sandeep/Documents/specdata"
pollutantmean <- function(directory,pollutant="sulfate",id=1:332){
temp = list.files(path=directory,pattern="*.csv")
dat = do.call(rbind,lapply(temp,function(x) read.csv(x)))
net = data.frame()
for (f in id) {
if(pollutant=="sulfate"){
get <-dat[dat$ID ==f,2]
} else {
get <-dat[dat$ID ==f,3]
}
net <- c(get,net)
}
s<-as.numeric(net)
avg <-mean(s,na.rm=TRUE)
print(avg)
pollutantmean <- function(directory,pollutant="sulfate",id=1:332){
temp = list.files(path=directory,pattern="*.csv")
dat = do.call(rbind,lapply(temp,function(x) read.csv(x)))
net = data.frame()
for (f in id) {
if(pollutant=="sulfate"){
get <-dat[dat$ID ==f,2]
} else {
get <-dat[dat$ID ==f,3]
}
net <- c(get,net)
}
pollutantmean <- function(directory,pollutant="sulfate",id=1:332){
temp = list.files(path=directory,pattern="*.csv")
dat = do.call(rbind,lapply(temp,function(x) read.csv(x)))
net = data.frame()
for (f in id) {
if(pollutant=="sulfate"){
get <-dat[dat$ID ==f,2]
} else {
get <-dat[dat$ID ==f,3]
}
net <- c(get,net)
}
data(iris)
library(ggplot2)
names(iris)
inTrain <- createDataPartition(y=iris$Species, p=0.7,list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
?createDataPartition
?? createDataPartition
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
inTrain <- createDataPartition(y=iris$Species, p=0.7,list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
qplot(Petal.Width,Sepal.Width,colour=Species,data=training)
modFit(train(Species ~. , method="rpart",data=training))
modFit <- train(Species ~. , method="rpart",data=training)
modFit <- train(Species ~. , method="rpart", data=training)
print(modFit$finalModel)
modFit <- train(Species ~ . , method="rpart", data=training)
print(modFit$finalModel)
modFit <- train(Species ~. , method="rpart", data=training)
print(modFit$finalModel)
modFit <- train(Species ~., method="rpart", data=training)
print(modFit$finalModel)
modFit <- train(Species ~ ., method="rpart", data=training)
print(modFit$finalModel)
install.packages('caret', dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
modFit <- train(Species ~., method="rpart", data=training)
print(modFit$finalModel)
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
modFit <- train(Species ~., method="rpart", data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform = TRUE
main= "Classification Tree")
text(modFit$finalModel,use=n.True,all=TRUE,cex=.8)
plot(modFit$finalModel, uniform = TRUE,
main= "Classification Tree")
text(modFit$finalModel,use=n.True,all=TRUE,cex=.8)
plot(modFit$finalModel, uniform = TRUE,
main= "Classification Tree")
text(modFit$finalModel,use.n=True,all=TRUE,cex=.8)
library(rattle)
install.packages("rattle")
library(rattle)
0
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
